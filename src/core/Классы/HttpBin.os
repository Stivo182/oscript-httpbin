// BSLLS:UsingHardcodeNetworkAddress-off

#Использовать 1connector
#Использовать fs

Перем _ЗапускатьВФоне;  // Булево
Перем _ОжидатьЗапуск;   // Булево
Перем _ТаймаутОжидания; // Количество
Перем _ИмяХоста;        // Строка
Перем _Порт;            // Число
Перем _Процесс;         // Процесс, Неопределено

#Область ПрограммныйИнтерфейс

// Запускает сервис
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция Запустить() Экспорт

	Если Активен() Тогда
		ВызватьИсключение "Процесс уже запущен";
	КонецЕсли;

	КаталогПрограммы = КаталогПрограммы();
	РабочийКаталог = ФС.НормализоватьПуть(ОбъединитьПути(ТекущийСценарий().Каталог, "../../.."));

	Если ЭтоWindows() Тогда
		ИсполняемыйФайл = ОбъединитьПути(КаталогПрограммы, "oscript.exe");
	Иначе
		ИсполняемыйФайл = ОбъединитьПути(КаталогПрограммы, "oscript");
	КонецЕсли;

	Если Не ФС.ФайлСуществует(ИсполняемыйФайл) Тогда
		ВызватьИсключение "Не удалось найти исполняемый файл oscript";
	КонецЕсли;

	СтрокаКоманды = Новый Массив();
	СтрокаКоманды.Добавить(ОбернутьВКавычки(ИсполняемыйФайл));
	СтрокаКоманды.Добавить(ОбернутьВКавычки(ТочкаВходаКонсольногоПриложения()));
	СтрокаКоманды.Добавить("run");
	СтрокаКоманды.Добавить("--host");
	СтрокаКоманды.Добавить(_ИмяХоста);
	СтрокаКоманды.Добавить("--port");
	СтрокаКоманды.Добавить(Формат(_Порт, "ЧГ="));
	СтрокаКоманды = СтрСоединить(СтрокаКоманды, " ");

	_Процесс = СоздатьПроцесс(СтрокаКоманды, РабочийКаталог, , , , ПеременныеСреды());
	_Процесс.Запустить();

	Если Не _ЗапускатьВФоне Тогда
		_Процесс.ОжидатьЗавершения();
		Возврат ЭтотОбъект;
	КонецЕсли;

	Если _ОжидатьЗапуск Тогда
		НачатьОжиданиеЗапуска();
	КонецЕсли;

	Возврат ЭтотОбъект;
	
КонецФункции

// Останавливает сервис
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция Остановить() Экспорт

	Если Активен() Тогда
		_Процесс.Завершить();
	КонецЕсли;

	Возврат ЭтотОбъект;

КонецФункции

// Проверяет, что сервис запущен
//
// Возвращаемое значение:
//   Булево
Функция Запущен() Экспорт

	КодСостояния = "";

	Попытка
		Ответ = КоннекторHTTP.Head(URL(), Новый Структура("Таймаут", _ТаймаутОжидания));
		КодСостояния = Ответ.КодСостояния;
	Исключение
		Возврат Ложь;
	КонецПопытки;

	Возврат КодСостояния = КодыСостоянияHTTP.ОК_200;

КонецФункции

// Возвращает адрес сервиса
//
// Возвращаемое значение:
//   Строка
Функция URL() Экспорт
	Возврат СтрШаблон("http://%1:%2", _ИмяХоста, _Порт);
КонецФункции

// Порт сервиса
//
// Возвращаемое значение:
//   Строка
Функция Порт() Экспорт
	Возврат _Порт;
КонецФункции

// Устанавливает порт сервиса
//
// Параметры:
//   Порт - Число - Номер порта
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьПорт(Порт) Экспорт
	_Порт = Порт;
	Возврат ЭтотОбъект;
КонецФункции

// Имя хоста / ip адрес сервиса
//
// Возвращаемое значение:
//   Строка
Функция Хост() Экспорт
	Возврат _ИмяХоста;
КонецФункции

// Устанавливает хост сервиса
//
// Параметры:
//   Хост - Строка - Имя хоста / ip адрес
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьХост(Хост) Экспорт
	_ИмяХоста = Хост;
	Возврат ЭтотОбъект;
КонецФункции

// Запуск сервиса будет выполнен в фоновом режиме
//
// Параметры:
//  Флаг - Булево
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ЗапускатьВФоне(Флаг = Истина) Экспорт
	_ЗапускатьВФоне = Флаг;
	Возврат ЭтотОбъект;
КонецФункции

// Ожидать завершение запуска сервиса, запущенного в фоновом режиме
//
// Параметры:
//  Флаг - Булево
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ОжидатьЗапуск(Флаг = Истина) Экспорт
	_ОжидатьЗапуск = Флаг;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает таймаут ожидания запуска сервиса, запущенного в фоновом режиме
//
// Параметры:
//  Таймаут - Количество - Таймаут в секундах
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьТаймаутОжидания(Таймаут) Экспорт
	_ТаймаутОжидания = Таймаут;
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Cервис тестирования HTTP клиента.
//
// Сервис по умолчанию запускается по адресу 127.0.0.1:3333 в фоновом режиме 
// и с ожиданием завершения запуска сервиса.
Процедура ПриСозданииОбъекта()

	ХостПоУмолчанию = "127.0.0.1";
	ПортПоУмолчанию = 3333;
	ТаймаутОжиданияПоУмолчанию = 5;

	УстановитьХост(ХостПоУмолчанию);
	УстановитьПорт(ПортПоУмолчанию);
	ЗапускатьВФоне();
	ОжидатьЗапуск();
	УстановитьТаймаутОжидания(ТаймаутОжиданияПоУмолчанию);
	
КонецПроцедуры

// Проверяет, что процесс сервиса активен
//
// Возвращаемое значение:
//   Булево
Функция Активен()
	Возврат Не _Процесс = Неопределено И Не _Процесс.Завершен;
КонецФункции

Процедура НачатьОжиданиеЗапуска()

	ЗадержкаМеждуПопытками = 100; // Миллисекунд
	ВремяНачала = ТекущаяУниверсальнаяДата();

	Пока Истина Цикл

		КодСостояния = Неопределено;
		ТекстИсключения = "";
		Попытка
			Ответ = КоннекторHTTP.Head(URL(), Новый Структура("Таймаут", _ТаймаутОжидания));
			КодСостояния = Ответ.КодСостояния;
		Исключение
			ТекстИсключения = СокрП(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстИсключения = СтрПолучитьСтроку(ТекстИсключения, СтрЧислоСтрок(ТекстИсключения));
		КонецПопытки;

		Если КодСостояния = КодыСостоянияHTTP.ОК_200 Тогда
			Прервать;
		КонецЕсли;

		ПрошлоСекунд = ТекущаяУниверсальнаяДата() - ВремяНачала;
		Если ПрошлоСекунд > _ТаймаутОжидания Или ЗначениеЗаполнено(КодСостояния) Тогда

			ТекстОшибки = СтрШаблон(
				"Не удалось запустить веб-сервер по адресу %1:%2 в течение %3 сек.",
				_ИмяХоста,
				_Порт,
				_ТаймаутОжидания);

			Если ЗначениеЗаполнено(КодСостояния) Тогда
				ТекстОшибки = СтрШаблон("%1:
				|%2", ТекстОшибки, КодыСостоянияHTTP.Представление(КодСостояния));
			Иначе
				ТекстОшибки = СтрШаблон("%1:
				|%2", ТекстОшибки, ТекстИсключения);
			КонецЕсли;

			ВызватьИсключение ТекстОшибки;

		КонецЕсли;

		Приостановить(ЗадержкаМеждуПопытками);

	КонецЦикла;

КонецПроцедуры

Функция ТочкаВходаКонсольногоПриложения()
	Возврат Новый Файл(ОбъединитьПути(ТекущийСценарий().Каталог, "../../cmd/main.os")).ПолноеИмя;
КонецФункции

Функция ОбернутьВКавычки(Строка)
	Кавычка = ?(ЭтоWindows(), """", "'");
	Возврат СтрШаблон("%2%1%2", Строка, Кавычка);
КонецФункции

Функция ЭтоWindows()

	СистемнаяИнформация = Новый СистемнаяИнформация();
	ТекущаяПлатформа = СистемнаяИнформация.ТипПлатформы;

	Возврат ТекущаяПлатформа = ТипПлатформы.Windows_x86_64
		Или ТекущаяПлатформа = ТипПлатформы.Windows_x86;

КонецФункции

#КонецОбласти