// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:UsingHardcodeNetworkAddress-off

#Использовать 1connector
#Использовать fs
#Использовать logos

Перем _ТаймаутЗапуска;           // Число - Таймаут запуска сервиса в секундах
Перем _ТаймаутПроверки;          // Число - Таймаут HTTP-проверки доступности в секундах
Перем _ИмяХоста;                 // Строка - IP-адрес или доменное имя хоста
Перем _Порт;                     // Число - Номер TCP-порта сервиса
Перем _РасположениеКонтроллеров; // Строка, Неопределено - Путь к папке или файлу с кастомными контроллерами
Перем _Процесс;                  // Процесс, Неопределено - Объект запущенного процесса
Перем _Лог;                      // Лог - Логгер для отладочной информации

#Область ПрограммныйИнтерфейс

// Запускает HTTP-сервис в синхронном режиме с ожиданием полной готовности.
// Блокирует выполнение до тех пор, пока сервис не начнет отвечать на запросы
// или не истечет таймаут запуска.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для возможности цепочки вызовов
//
Функция Запустить() Экспорт
	Возврат ЗапуститьПроцесс(Истина);
КонецФункции

// Запускает HTTP-сервис в асинхронном режиме без ожидания готовности.
// Возвращает управление немедленно после старта процесса.
// Используйте метод Отвечает() для проверки готовности сервиса.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для возможности цепочки вызовов
//
Функция ЗапуститьАсинх() Экспорт
	Возврат ЗапуститьПроцесс(Ложь);
КонецФункции

// Останавливает работающий HTTP-сервис.
// Если сервис не запущен, метод ничего не делает.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для возможности цепочки вызовов
//
Функция Остановить() Экспорт

	Если Активен() Тогда
		_Процесс.Завершить();
	КонецЕсли;

	Возврат ЭтотОбъект;

КонецФункции

// Ожидает завершения работы сервиса.
// Блокирует выполнение до тех пор, пока процесс сервиса не завершится.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для возможности цепочки вызовов
//
Функция ОжидатьЗавершения() Экспорт

	Если Не Активен() Тогда
		ВызватьИсключение "Невозможно ожидать завершения: процесс сервиса не запущен";
	КонецЕсли;

	_Процесс.ОжидатьЗавершения();

	Возврат ЭтотОбъект;

КонецФункции

// Проверяет доступность сервиса через HTTP-запрос.
// Выполняет HEAD-запрос к корневому URL сервиса и проверяет код ответа.
//
// Возвращаемое значение:
//   Булево - Истина, если сервис доступен и возвращает HTTP 200 OK
//
Функция Отвечает() Экспорт

	Если Не Активен() Тогда
		Возврат Ложь;
	КонецЕсли;

	КодСостояния = "";

	Попытка
		Ответ = КоннекторHTTP.Head(URL(), Новый Структура("Таймаут", _ТаймаутПроверки));
		КодСостояния = Ответ.КодСостояния;
	Исключение
		_Лог.Отладка(
			"Сервис недоступен по адресу %1. Ошибка: %2", 
			URL(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		Возврат Ложь;
	КонецПопытки;

	Возврат КодСостояния = КодыСостоянияHTTP.ОК_200;

КонецФункции

// Проверяет, что процесс сервиса запущен и не завершен.
//
// Возвращаемое значение:
//   Булево
//
Функция Активен() Экспорт
	Возврат Не _Процесс = Неопределено И Не _Процесс.Завершен;
КонецФункции

// Возвращает номер TCP-порта, на котором работает сервис.
//
// Возвращаемое значение:
//   Число - Номер порта (1-65535)
//
Функция Порт() Экспорт
	Возврат _Порт;
КонецФункции

// Устанавливает TCP-порт для запуска сервиса.
// Должен быть вызван до запуска сервиса.
//
// Параметры:
//   Порт - Число - Номер порта (1-65535)
//
// Возвращаемое значение:
//   ЭтотОбъект - Для возможности цепочки вызовов
//
Функция УстановитьПорт(Порт) Экспорт
	_Порт = Порт;
	Возврат ЭтотОбъект;
КонецФункции

// Возвращает имя хоста или IP-адрес сервиса.
//
// Возвращаемое значение:
//   Строка - Имя хоста или IP-адрес (например, "127.0.0.1" или "localhost")
//
Функция Хост() Экспорт
	Возврат _ИмяХоста;
КонецФункции

// Устанавливает имя хоста или IP-адрес для запуска сервиса.
// Должен быть вызван до запуска сервиса.
//
// Параметры:
//   Хост - Строка - Имя хоста или IP-адрес (например, "127.0.0.1", "localhost", "0.0.0.0")
//
// Возвращаемое значение:
//   ЭтотОбъект - Для возможности цепочки вызовов
//
Функция УстановитьХост(Хост) Экспорт
	_ИмяХоста = Хост;
	Возврат ЭтотОбъект;
КонецФункции

// Формирует полный URL-адрес сервиса с опциональным путем к ресурсу.
//
// Параметры:
//   АдресРесурса - Строка - Путь к ресурсу (например, "/get"). 
//                           Слэш в начале необязателен.
//
// Возвращаемое значение:
//   Строка - Полный URL (например, "http://127.0.0.1:3333/get")
//
Функция URL(Знач АдресРесурса = "") Экспорт

	Если Лев(АдресРесурса, 1) <> "/" Тогда
		АдресРесурса = "/" + АдресРесурса;
	КонецЕсли;

	Возврат СтрШаблон("http://%1:%2%3", _ИмяХоста, _Порт, АдресРесурса);

КонецФункции

// Устанавливает максимальное время ожидания запуска сервиса.
// Применяется при синхронном запуске через метод Запустить().
//
// Параметры:
//  Таймаут - Число - Таймаут в секундах
//
// Возвращаемое значение:
//   ЭтотОбъект - Для возможности цепочки вызовов
//
Функция УстановитьТаймаутЗапуска(Таймаут) Экспорт
	_ТаймаутЗапуска = Таймаут;
	Возврат ЭтотОбъект;
КонецФункции

// Возвращает текущее значение таймаута запуска сервиса.
//
// Возвращаемое значение:
//   Число - Таймаут в секундах
//
Функция ТаймаутЗапуска() Экспорт
	Возврат _ТаймаутЗапуска;
КонецФункции

// Устанавливает путь к папке или файлу с кастомными контроллерами, определяющими маршруты сервиса.
//
// Параметры:
//  Расположение - Строка - Путь к папке или файлу с контроллерами (например, "./controllers" или "./МойКонтроллер.os")
//
// Возвращаемое значение:
//   ЭтотОбъект - Для возможности цепочки вызовов
//
Функция УстановитьРасположениеКонтроллеров(Расположение) Экспорт
	_РасположениеКонтроллеров = Расположение;
	Возврат ЭтотОбъект;
КонецФункции

// Возвращает текущий путь к папке или файлу с кастомными контроллерами.
//
// Возвращаемое значение:
//   Строка, Неопределено
//
Функция РасположениеКонтроллеров() Экспорт
	Возврат _РасположениеКонтроллеров;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Конструктор класса.
//
// По умолчанию сервис настроен на локальный адрес 127.0.0.1:3333
// с таймаутом запуска 5 секунд.
//
// Параметры:
//   Хост - Строка - IP-адрес или имя хоста (по умолчанию "127.0.0.1")
//   Порт - Число - Номер TCP-порта (по умолчанию 3333)
//
Процедура ПриСозданииОбъекта(Хост = "127.0.0.1", Порт = 3333) // BSLLS:MagicNumber-off

	ТаймаутЗапускаПоУмолчанию = 5;
	_ТаймаутПроверки = 3;

	УстановитьХост(Хост);
	УстановитьПорт(Порт);
	УстановитьТаймаутЗапуска(ТаймаутЗапускаПоУмолчанию);

	_Лог = Логирование.ПолучитьЛог("oscript.lib.httpbin");
	
КонецПроцедуры

Функция ЗапуститьПроцесс(Синхронно)

	Если Активен() Тогда
		ВызватьИсключение "Невозможно запустить сервис: процесс уже запущен.";
	КонецЕсли;

	РабочийКаталог = ФС.НормализоватьПуть(ОбъединитьПути(ТекущийСценарий().Каталог, "../../.."));
	ИсполняемыйФайл = НайтиИсполняемыйФайл();

	СтрокаКоманды = Новый Массив();
	СтрокаКоманды.Добавить(ОбернутьВДвойныеКавычки(ИсполняемыйФайл));
	СтрокаКоманды.Добавить(ОбернутьВКавычки(ТочкаВходаКонсольногоПриложения()));
	СтрокаКоманды.Добавить("run");
	СтрокаКоманды.Добавить("--host");
	СтрокаКоманды.Добавить(_ИмяХоста);
	СтрокаКоманды.Добавить("--port");
	СтрокаКоманды.Добавить(Формат(_Порт, "ЧГ="));
	СтрокаКоманды.Добавить("--parent-pid");
	СтрокаКоманды.Добавить(Формат(ТекущийПроцесс().Идентификатор, "ЧГ="));

	Если ЗначениеЗаполнено(_РасположениеКонтроллеров) Тогда
		СтрокаКоманды.Добавить("--routes-handlers");
		СтрокаКоманды.Добавить(ОбернутьВКавычки(_РасположениеКонтроллеров));
	КонецЕсли;

	СтрокаКоманды = СтрСоединить(СтрокаКоманды, " ");

	_Лог.Отладка("Запуск процесса: %1", СтрокаКоманды);

	_Процесс = СоздатьПроцесс(СтрокаКоманды, РабочийКаталог, , , , ПеременныеСреды());
	_Процесс.Запустить();

	Если Синхронно Тогда
		НачатьОжиданиеЗапуска();

		Если Не Активен() Тогда
			ВызватьИсключение СтрШаблон("Не удалось запустить сервис по адресу %1:%2", Хост(), Порт());
		КонецЕсли;
	КонецЕсли;

	Возврат ЭтотОбъект;
	
КонецФункции

Процедура НачатьОжиданиеЗапуска()

	ЗадержкаМеждуПопытками = 100; // Миллисекунд
	ВремяНачала = ТекущаяУниверсальнаяДата();
	НомерПопытки = 0;

	Пока Истина Цикл

		НомерПопытки = НомерПопытки + 1;
		КодСостояния = Неопределено;
		ТекстИсключения = "";
		
		_Лог.Отладка("Проверка готовности сервиса %1. Попытка: %2", URL(), НомерПопытки);

		Попытка
			Ответ = КоннекторHTTP.Head(URL(), Новый Структура("Таймаут", _ТаймаутПроверки));
			КодСостояния = Ответ.КодСостояния;
		Исключение
			ТекстИсключения = СокрП(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстИсключения = СтрПолучитьСтроку(ТекстИсключения, СтрЧислоСтрок(ТекстИсключения));
		КонецПопытки;

		Если КодСостояния = КодыСостоянияHTTP.ОК_200 Тогда
			_Лог.Отладка("Сервис %1 успешно запущен и готов к работе.", URL());
			Прервать;
		КонецЕсли;

		ПрошлоСекунд = ТекущаяУниверсальнаяДата() - ВремяНачала;
		Если ПрошлоСекунд > _ТаймаутЗапуска Или ЗначениеЗаполнено(КодСостояния) Тогда

			ТекстОшибки = СтрШаблон(
				"Превышен таймаут запуска сервиса %1:%2 (%3 сек). "
				+ "Сервис не начал отвечать на запросы в течение отведенного времени.",
				_ИмяХоста,
				_Порт,
				_ТаймаутЗапуска);

			Если ЗначениеЗаполнено(КодСостояния) Тогда
				ТекстОшибки = СтрШаблон("%1:
					|%2", 
					ТекстОшибки,
					КодыСостоянияHTTP.Представление(КодСостояния)
				);
			Иначе
				ТекстОшибки = СтрШаблон("%1:
					|%2",
					ТекстОшибки,
					ТекстИсключения
				);
			КонецЕсли;

			ВызватьИсключение ТекстОшибки;

		КонецЕсли;

		Приостановить(ЗадержкаМеждуПопытками);

	КонецЦикла;

КонецПроцедуры

Функция ТочкаВходаКонсольногоПриложения()
	Возврат ФС.НормализоватьПуть(ОбъединитьПути(ТекущийСценарий().Каталог, "../../cmd/main.os"));
КонецФункции

Функция НайтиИсполняемыйФайл()

	КаталогПрограммы = КаталогПрограммы();
	
	ВариантыИмени = Новый Массив();
	ВариантыИмени.Добавить("oscript.exe");
	ВариантыИмени.Добавить("oscript");
	
	Для Каждого ИмяФайла Из ВариантыИмени Цикл
		ИсполняемыйФайл = ОбъединитьПути(КаталогПрограммы, ИмяФайла);
		Если ФС.ФайлСуществует(ИсполняемыйФайл) Тогда
			Возврат ИсполняемыйФайл;
		КонецЕсли;
	КонецЦикла;

	ВызватьИсключение СтрШаблон("Не найден исполняемый файл oscript в каталоге: %1", КаталогПрограммы);

КонецФункции

Функция ОбернутьВДвойныеКавычки(Строка)
	Возврат СтрШаблон("%2%1%2", Строка, """");
КонецФункции

Функция ОбернутьВКавычки(Строка)
	Кавычка = ?(ЭтоWindows(), """", "'");
	Возврат СтрШаблон("%2%1%2", Строка, Кавычка);
КонецФункции

Функция ЭтоWindows()

	СистемнаяИнформация = Новый СистемнаяИнформация();
	ТекущаяПлатформа = СистемнаяИнформация.ТипПлатформы;

	Возврат ТекущаяПлатформа = ТипПлатформы.Windows_x86_64
		Или ТекущаяПлатформа = ТипПлатформы.Windows_x86;

КонецФункции

#КонецОбласти