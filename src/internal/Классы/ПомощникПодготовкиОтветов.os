// BSLLS:ExportVariables-off

Перем ТекстRobots Экспорт; // Строка
Перем ASCII_Deny Экспорт; // Строка
Перем ASCII_Teapot;
Перем АдресРедиректа; // Строка
Перем ПоддерживаемыеМедиаТипы; // Массив из Строка

Перем Настройки;
Перем Парсеры;

Процедура ЗаполнитьОтветJson(Ответ, Данные) Экспорт

	Парсер = Новый ПарсерJSON();

	Ответ.УстановитьТипКонтента("json");
	Ответ.ТелоТекст = Парсер.ЗаписатьJSON(Данные);

КонецПроцедуры

Процедура ЗаполнитьОтветПоСостоянию(Ответ, КодСостояния) Экспорт
	
	Ответ.УстановитьСостояние(КодСостояния);

	Если КодСостояния >= 301 И КодСостояния <= 307 И Не КодСостояния = 304 Тогда

		Ответ.Заголовки["Location"] = АдресРедиректа;

	ИначеЕсли КодСостояния = 401 Тогда

		Ответ.Заголовки["WWW-Authenticate"] = "Basic realm=""Fake Realm""";

	ИначеЕсли КодСостояния = 402 Тогда

		Ответ.ТелоТекст = "Fuck you, pay me!";
		Ответ.Заголовки["x-more-info"] = "http://vimeo.com/22053820";

	ИначеЕсли КодСостояния = 406 Тогда

		Данные = Новый Структура();
		Данные.Вставить("message", "Client did not request a supported media type.");
		Данные.Вставить("accept", ПоддерживаемыеМедиаТипы);

		ЗаполнитьОтветJson(Ответ, Данные);

	ИначеЕсли КодСостояния = 407 Тогда

		Ответ.Заголовки["Proxy-Authenticate"] = "Basic realm=""Fake Realm""";

	ИначеЕсли КодСостояния = 418 Тогда

		Ответ.ТелоТекст = ASCII_Teapot;
		Ответ.СостояниеТекст = "I'm a teapot";
		Ответ.Заголовки["x-more-info"] = "http://tools.ietf.org/html/rfc2324";
		Ответ.Заголовки.Удалить("Content-Type");

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеЗапроса(Ключи, Запрос, ДанныеФормы = Неопределено, ТелоЗапросОбъект = Неопределено) Экспорт
	
	ДанныеФормы = РазделитьДанныеФормы(ДанныеФормы);
	Данные = "";

	Если СокрЛП(Запрос.Заголовки["Content-Type"]) = "application/x-www-form-urlencoded" Тогда
		ДанныеФормы.Данные = Парсеры.ПараметрыИзТекста(Запрос.Тело);
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеФормы.Данные) И Не ЗначениеЗаполнено(ДанныеФормы.Файлы) Тогда
		Данные = Запрос.Тело;
	КонецЕсли;

	ДанныеЗапроса = Новый Структура();
	ДанныеЗапроса.Вставить("url", ПолучитьURL(Запрос.ПолныйПуть));
	ДанныеЗапроса.Вставить("args", Запрос.ПараметрыИменные);
	ДанныеЗапроса.Вставить("headers", Запрос.Заголовки);
	ДанныеЗапроса.Вставить("origin", Запрос.АдресУдаленногоУзла);
	ДанныеЗапроса.Вставить("json", ?(Не ТелоЗапросОбъект = Неопределено, ТелоЗапросОбъект, null));
	ДанныеЗапроса.Вставить("data", Данные);
	ДанныеЗапроса.Вставить("form", ДанныеФормы.Данные);
	ДанныеЗапроса.Вставить("files", ДанныеФормы.Файлы);

	Результат = Новый Структура(Ключи);
	ЗаполнитьЗначенияСвойств(Результат, ДанныеЗапроса);

	Возврат Результат;

КонецФункции

Функция ДанныеАутентификации(Запрос) Экспорт

	Данные = Новый Структура("Тип", "");

	Заголовок = ЗначениеЗаголовка(Запрос.Заголовки, "Authorization");
	Если ПустаяСтрока(Заголовок) Тогда
		Возврат Данные;
	КонецЕсли;

	РазделеннаяСтрока = РазделитьСтроку(Заголовок, " ");

	ТипАутентификации = НРег(РазделеннаяСтрока.Лево);
	Данные.Тип = ТипАутентификации;

	Значение = РазделеннаяСтрока.Право;

	Если ТипАутентификации = "basic" Тогда

		Данные.Вставить("ИмяПользователя");
		Данные.Вставить("Пароль");

		Попытка
			ПользовательИПароль = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(Значение));
			ПользовательИПароль = РазделитьСтроку(ПользовательИПароль, ":");
			
			Данные.ИмяПользователя = ПользовательИПароль.Лево;
			Данные.Пароль = ПользовательИПароль.Право;	
		Исключение
			// Ничего не делаем
		КонецПопытки;

	ИначеЕсли ТипАутентификации = "bearer" Тогда

		Данные.Вставить("Токен", Значение);

	КонецЕсли;

	Возврат Данные;

КонецФункции

Функция РазделитьДанныеФормы(ДанныеФормы)

	Результат = Новый Структура();
	Результат.Вставить("Данные", Новый Соответствие());
	Результат.Вставить("Файлы", Новый Соответствие());

	Если ДанныеФормы = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Для Индекс = 0 По ДанныеФормы.Количество() - 1 Цикл
		Строка = ДанныеФормы.ПолучитьПоИндексу(Индекс);
		Имя = Строка.Метаданные["Content-Disposition"]["name"];
		ИмяФайла = Строка.Метаданные["Content-Disposition"]["filename"];

		Если Не Строка.Значение = Неопределено Тогда
			Значение = ПолучитьСтрокуИзДвоичныхДанных(Строка.Значение);
		Иначе
			Значение = Неопределено;
		КонецЕсли;

		Если ИмяФайла = Неопределено Тогда
			Контейнер = Результат.Данные;
		Иначе	
			Контейнер = Результат.Файлы;
		КонецЕсли;

		НайденноеЗначение = Контейнер[Имя];
		Если НайденноеЗначение = Неопределено Тогда
			Контейнер.Вставить(Имя, Значение);
		ИначеЕсли ТипЗнч(НайденноеЗначение) = Тип("Массив") Тогда
			НайденноеЗначение.Добавить(Значение);
		Иначе
			МассивЗначений = Новый Массив();
			МассивЗначений.Добавить(НайденноеЗначение);
			МассивЗначений.Добавить(Значение);
			Контейнер.Вставить(Имя, МассивЗначений);
		КонецЕсли;		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ЗначениеЗаголовка(Заголовки, Знач Имя) Экспорт

	Имя = НРег(Имя);

	Для Каждого Заголовок Из Заголовки Цикл
		Если НРег(Заголовок.Ключ) = Имя Тогда
			Возврат Заголовок.Значение;
		КонецЕсли;
	КонецЦикла;

КонецФункции

Функция РаспаристьМногозначныйЗаголовок(Значение) Экспорт
	
	Результат = Новый Массив();

	РегулярноеВыражение = Новый РегулярноеВыражение("\s*(W\/)?\""?([^""]*)\""?\s*");
	Подстроки = СтрРазделить(Значение, ",");

	Для Каждого Подстрока Из Подстроки Цикл
		КоллекцияСовпадений = РегулярноеВыражение.НайтиСовпадения(Подстрока);

		Для Каждого Совпадение Из КоллекцияСовпадений Цикл
			НайденноеЗначение = Совпадение.Группы[2].Значение;
			Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
				Результат.Добавить(НайденноеЗначение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьURL(ПолныйПуть) Экспорт

	Возврат "http://" 
		+ Настройки.ИмяХоста 
		+ ?(Настройки.Порт = 80, "", ":" + Формат(Настройки.Порт, "ЧГ="))
		+ ПолныйПуть;

КонецФункции

Функция РазделитьСтроку(Строка, Разделитель) Экспорт
	Результат = Новый Структура("Лево, Право", "", "");
	ПозицияРазделителя = СтрНайти(Строка, Разделитель);

	Если ПозицияРазделителя = 0 Тогда
		Результат.Лево = Строка;
	Иначе
		Результат.Лево = Лев(Строка, ПозицияРазделителя - 1);
		Результат.Право = Сред(Строка, ПозицияРазделителя + СтрДлина(Разделитель));
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция HttpДата(Знач Дата = Неопределено) Экспорт
	Если Дата = Неопределено Тогда
		Дата = ТекущаяУниверсальнаяДата();
	КонецЕсли;

	Возврат Формат(Дата, "Л=en; ДФ='ддд, д МММ гггг чч:мм:сс ''GMT'''");
КонецФункции

Функция ВЧисло(Значение) Экспорт
	Возврат Новый ОписаниеТипов("Число").ПривестиЗначение(Значение);
КонецФункции

Процедура ДополнитьСоответствие(Приемник, Источник) Экспорт

	Для Каждого Элемент Из Источник Цикл
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ВыбратьСлучайныйЭлементСУчетомВеса(Список) Экспорт
	
	ОбщийВес = 0;
	НакопленныеВеса = Новый Массив();
	Для Каждого Элемент Из Список Цикл
		ОбщийВес = ОбщийВес + Элемент.Вес;
		НакопленныеВеса.Добавить(ОбщийВес);
	КонецЦикла;

	ГСЧ = Новый ГенераторСлучайныхЧисел();
	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, ОбщийВес);

	НижняяГраница = 0;
	ВерхняяГраница = Список.Количество();
	Пока НижняяГраница < ВерхняяГраница Цикл
		Середина = Цел((НижняяГраница + ВерхняяГраница) / 2);
		Если СлучайноеЧисло < НакопленныеВеса[Середина] Тогда
			ВерхняяГраница = Середина;
		Иначе
			НижняяГраница = Середина + 1;
		КонецЕсли;
	КонецЦикла;

	Возврат Список[НижняяГраница].Значение;

КонецФункции

Процедура ЗаполнитьПоддерживаемыеМедиаТипы()

	ПоддерживаемыеМедиаТипы = Новый Массив();
	ПоддерживаемыеМедиаТипы.Добавить("image/webp");
	ПоддерживаемыеМедиаТипы.Добавить("image/svg+xml");
	ПоддерживаемыеМедиаТипы.Добавить("image/jpeg");
	ПоддерживаемыеМедиаТипы.Добавить("image/png");
	ПоддерживаемыеМедиаТипы.Добавить("image/*");

КонецПроцедуры

&Желудь
Процедура ПриСозданииОбъекта(
	&Пластилин("Настройки") _Настройки,
	&Пластилин("Парсеры") _Парсеры)

	Настройки = _Настройки;
	Парсеры = _Парсеры;
	
	ЗаполнитьПоддерживаемыеМедиаТипы();
	АдресРедиректа = "/redirect/1";
	
	ТекстRobots = "User-agent: *
	|Disallow: /deny";
	
	ASCII_Deny = "
	|          .-''''''-.
	|        .' _      _ '.
	|       /   O      O   \
	|      :                :
	|      |                |
	|      :       __       :
	|       \  .-""`  `""-.  /
	|        '.          .'
	|          '-......-'
	|     YOU SHOULDN'T BE HERE";

	ASCII_Teapot = "
	|    -=[ teapot ]=-
	|
	|       _...._
	|     .'  _ _ `.
	|    | .""` ^ `"". _,
	|    \_;`""---""`|//
	|      |       ;/
	|      \_     _/
	|        `""""""`";

КонецПроцедуры